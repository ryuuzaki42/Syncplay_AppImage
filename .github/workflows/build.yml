name: Create new realease

on:
  push:
    branches:
      - "**"
    tags:
      - "!**"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
    - name: Install fuse and libfuse2
      run: sudo apt install fuse libfuse2

    - name: Get appimagetool
      run: |
        set -x
        wget https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage
        chmod +x appimagetool-x86_64.AppImage
        ls -lah

    - name: Get Pyhton AppImage
      run: |
        set -x
        wget https://github.com/niess/python-appimage/releases/download/python3.12/python3.12.3-cp312-cp312-manylinux_2_28_x86_64.AppImage
        fileName=$(ls python3*.AppImage)
        chmod +x "$fileName"
        ./"$fileName" --appimage-extract
        ls -lah

    - name: Install Syncplay and update pip
      run: |
        set -x

        version=$(grep -o "Syncplay:.*" README.md | cut -d ' ' -f2)
        echo "Syncplay version: $version"

        cd squashfs-root/opt/python3*/bin/
        pwd
        ls -lah

        wget https://github.com/Syncplay/syncplay/archive/refs/tags/v${version}.tar.gz
        tar -xvf v${version}.tar.gz
        cd syncplay-${version}/

        ../pip3* install --upgrade pip

        ../pip3* install -r requirements.txt --upgrade

        # Change pyside6 to PySide6-Essentials to reduce AppImage size
        sed -i 's/pyside6/PySide6-Essentials/g' requirements_gui.txt
        ../pip3* install -r requirements_gui.txt --upgrade

        make DESTDIR=../syncplay/ install
        cd ../

        rm -r syncplay-${version} v${version}.tar.gz

    - name: Make AppImage
      run: |
        set -x

        version=$(grep -o "Syncplay:.*" README.md | cut -d ' ' -f2)
        echo "Syncplay version: $version"

        cd squashfs-root/
        pwd
        ls -lah

        rm -v python* .DirIcon AppRun
        cd opt/python3.12/bin/

        #find . | grep ".png"
        #find . | grep ".svg"
        cp syncplay/usr/lib/syncplay/syncplay/resources/syncplay.png ./../../../

        #find . | grep ".desktop"
        cp syncplay/usr/lib/syncplay/syncplay/resources/syncplay.desktop ./../../../

        pwd
        ls -lah
        cd ../../../
        cat syncplay.desktop

        sed -i "s/Name=Syncplay/Name=Syncplay-$version/" syncplay.desktop
        mv syncplay.desktop Syncplay.desktop
        cat Syncplay.desktop

        cd ../
        pwd
        ls -lah

        echo '#!/bin/bash
        HERE="$(dirname "$(readlink -f "${0}")")"
        echo "HERE: $HERE"

        cd "$HERE"/opt/python3*/bin/
        ./python3.* syncplay/usr/lib/syncplay/syncplayClient.py "$@"'> squashfs-root/AppRun
        chmod +x squashfs-root/AppRun

        mv README.md squashfs-root/
        ls -lah squashfs-root/

        ARCH=x86_64 ./appimagetool-x86_64.AppImage squashfs-root/
        ls -lah

        fileName=$(ls Syncplay*.AppImage)
        echo "fileName: $fileName"
        fileNameNew=$(echo "$fileName" | sed 's/.AppImage//')
        mv "$fileName" "${fileNameNew}-1_JB.AppImage"
        md5sum "${fileNameNew}-1_JB.AppImage" > "${fileNameNew}-1_JB.AppImage.md5"
        ls -lah

    # Build - Error: Resource not accessible by integration
    # Change Settings -> Actions -> General -> Workflow Permissions to allow read and write:
    # https://github.com/actions/first-interaction/issues/10#issuecomment-1506118886

    # https://github.com/marketplace/actions/upload-to-github-release
    - uses: xresloader/upload-to-github-release@main
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          file: "Syncplay*.AppImage; Syncplay*.md5"
          #delete_file: "random-name-*.txt;random-*.txt"
          release_id: ${{ steps.create_release.outputs.id }}
          #overwrite: true
          verbose: true
          #tags: true
          draft: false
          default_release_name: "Syncplay V in AppImage"
